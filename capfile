default_run_options[:pty] = true

desc "Setup Application Config"
task :config_setup do
  options = YAML.load(File.read("config.yml"))
  set :working_server, h rescue nil
  set :working_app, a rescue nil
  set :root_pass, root rescue nil
end

task :config_write do
  File.open('config.yml', 'w') { |f| f.puts options.to_yaml }
  #puts "Hello I'm about to mangle your config file"
end




namespace :host do
  
  desc "Checks we have information to proceed with server operations"
  task :config_check do 
    config_setup
    "#{working_server}" rescue @parent.logger.log 0,"You need to specify a host to run the operation on. Use cap task -s h=yourhost"
    @use_applications = [ ]
    options["apps"].each do |app, settings|
      @use_applications << app if settings["server"]==working_server
    end
  end
  
  desc "Sets up the entire server for all apps on the server"
  task :setup do
    config_check
    @use_applications.each do |app|
      set :working_app, app
      @parent.app.setup
    end
  end
  
  desc "Performs a local backup of the applications and databases on the server"
  task :backup do
    config_check
    @use_applications.each do |app|
      set :working_app, app
      @parent.app.backup
    end
  end
  
  desc "Backs up the local backup folder to remote Amazon S3 storage"
  task :s3backup do
    config_check
  end
  
  task :ssh_key do
    config_check
    @use_applications.each do |app|
      set :working_app, app
      @parent.app.ssh_key
    end
  end
  
end
  
namespace :app do  
  
  
  task :config_check do
    config_setup
    @parent.roles.clear
    "#{working_app}" rescue abort "*** You need to specify an application to run the operation on. Use cap task -s a=yourapp"
    
    options["apps"][working_app].each do |key, setting|
      set "#{key}", setting
    end
    @parent.role :web, options["apps"][working_app]["domain"]
    set :application, working_app
    deploy_to rescue set :deploy_to, "."
    branch rescue set :branch, "master"
    app_databases rescue set (:app_databases, ["#{user}"])
  end
  
  task :needs_root do
    config_check
    puts "*** This operation needs root access - Please pass in a root password using -s root=password" if !defined? "#{root_pass}"
    exit if !defined? "#{root_pass}"
  end
  
  

  ######## Deploy Applications ######################
  desc "Deploy an application"
  task :deploy do
    config_check
    deploy_check
    php_wax_deploy if defined? "#{wax}"
    cms_deploy if defined? "#{cms}"
  end
  
  desc "Determines whether to use Git or Subversion"
  task :deploy_check do 
    fetch "repository" rescue abort "You have not specified a repository for this application"
    git_deploy if repository.include? "git"
    svn_deploy if repository.include? "svn"
  end
  
  desc "Deploys an application using Git"
  task :git_deploy do
    begin
      run "ls #{deploy_to}/.git"
    rescue
      run "git init"
      run "git remote add origin #{repository}"
    end
    run "git pull origin #{branch}"
  end
  
  desc "Deploys an application using Subversion"
  task :svn_deploy do
    run "svn export #{repository} #{deploy_to} --force"
  end
  
  desc "Installs cms plugin if specified"
  task :cms_deploy do
    begin
      run "ls plugins/cms/.git"
    rescue
      run "mkdir -p plugins/cms"
      run "cd plugins/cms && git init"
      run "cd plugins/cms && git remote add origin git@github.com:phpwax/wildfire.git"
    end
    run "git checkout #{cms}"
  end
  
  desc "Creates or checks out the specified version of PHP-Wax"
  task :php_wax_deploy do
    begin
      run "ls wax/.git"
    rescue
      run "mkdir wax"
      run "cd wax && git init"
      run "cd wax && git remote add origin git@github.com:phpwax/phpwax.git"
    end
    run "git checkout #{phpwax}"
  end
  
  ####### ##############
  
  
  ######## General Server Admin Tasks for Individual Apps #############
    
  desc "Restarts the Apache Server"
  task :restart do
    config_check
    needs_root
    with_user("root", "#{root_pass}") do 
      run "/etc/rc.d/init.d/httpd restart"
    end
  end
  
  
  ######### Backup and restore tasks #########################
  
  desc "Starts the backup process by checking which type to perform"
  task :backup do
    config_check
    needs_root
    backup_check
  end
  
  desc "Decides whether to do a simple filesystem backup, or use git to backup databases and code"
  task :backup_check do 
    if defined? "#{repository}"
      if repository.include? "git"
        git_mysql_backup
        upload_only_backup
      elsif repository.include? "svn"
        standard_mysql_backup
        upload_only_backup
      end
    else
      puts "No repository for #{application}"
      standard_mysql_backup
      simple_fs_backup
    end
  end
  
  desc "Just runs rSync on the home directory"
  task :simple_fs_backup do
    with_user("root", "#{root_pass}") do 
      run "mkdir -p /backup/#{application}"
      run "rsync -avzh /home/#{application}/ /backup/#{application}/"
    end
  end
  
  "For well versioned apps, performs a backup of just the uploaded files directory"
  task :upload_only_backup do
    with_user("root", "#{root_pass}") do 
      run "mkdir -p /backup/#{application}"
      run "rsync -avzh /home/#{application}/public/files/ /backup/#{application}/"
    end
  end
  
  "For svn controlled sites - backs up the db to public/files and then runs rSync on folder"
  task :standard_mysql_backup do
    run "mkdir -p public/files"
    app_databases.each do |db|
      run "mysqldump #{db} --skip-comments --add-drop-table -u#{user}  -p#{password} > public/files/#{db}.sql";
    end
    upload_only_backup
  end
  
  "Git Magic. Pushes the latest copy of the database to a separate DB Branch. If successful triggers backup of public/files"
  task :git_mysql_backup do
    transaction do
      run "mkdir -p tmp/backup"
      run "ln -s ../../.git/ tmp/backup/.git"
      begin 
        run "cd tmp/backup && git branch db"
        run "cd tmp/backup && git branch -d db" 
      rescue 
      end
      run "cd tmp/backup && git symbolic-ref HEAD refs/heads/db"
      run "cd tmp/backup && mv .git/index .git/index_old"
      app_databases.each do |db|
        run "cd tmp/backup && mysqldump #{db} --skip-comments --add-drop-table -u#{user}  -p#{password} > #{db}.sql";
      end
      run "cd tmp/backup && git add ."
      run "cd tmp/backup && git commit -m 'database update'" rescue ""
      run "cd tmp/backup && git push origin db"
      run "rm -Rf ./tmp/backup"
      run "mv -f .git/index_old .git/index" rescue ""
      run "git symbolic-ref HEAD refs/heads/#{branch}"
      on_rollback do
        run "rm -Rf ./tmp/backup"
        run "mv -f .git/index_old .git/index" rescue ""
        run "git symbolic-ref HEAD refs/heads/#{branch}"
      end
    end   
  end
  
  ####### User Backup Restore Tasks ###################
  
  task :restore do
    if defined? repository
      if repository.include? "git"
        upload_only_restore
        git_mysql_restore
      elsif repository.include? "svn"
        upload_only_restore
        standard_mysql_restore 
      end
    else
      simple_fs_restore
      standard_mysql_restore
    end
  end
  
  task :upload_only_restore do
    with_user("root", "#{root_pass}") do 
      run "rsync -avzh /backup/#{application}/ /home/#{application}/public/files/"
    end
  end
  
  task :git_mysql_restore do 
    run "mkdir -p tmp/backup"
    run "ln -s ../../ tmp/backup/.git"
    run "cd tmp/backup && git symbolic-ref HEAD refs/heads/db"
    run "cd tmp/backup && mv .git/index .git/index_old"
    app_databases.each do |db|
      run "cd tmp/backup && mysql #{db} -u#{user} -p#{password} < #{db}.sql"
    end
    run "rm -Rf ./tmp/backup"
    run "mv -f .git/index_old .git/index" rescue ""
    run "git symbolic-ref HEAD refs/heads/#{branch}"
  end
  
  desc "Just runs rSync back to the home directory"
  task :simple_fs_restore do
    with_user("root", "#{root_pass}") do 
      run "rsync -avzh /backup/#{application}/ /home/#{application}/"
    end
  end
  
  task :standard_mysql_restore do 
    app_databases.each do |db|
      run "cd tmp/backup && mysql #{db} -u#{user} -p#{password} < public/files/#{db}.sql"
    end
  end
  
  ########## User and App Initialisation Tasks ########################
  
  desc "Sets up the user for the application if it doesn't exist"
  task :setup_user do
    config_check
    needs_root
    set :user_to_add, "#{user}"
    set :passwd_to_add, "#{password}"
    with_user("root", "#{root_pass}") do 
      run "useradd -p `openssl passwd #{passwd_to_add}` #{user_to_add}"
    end
  end
  
  task :setup_mysql do
    with_user("root", "#{root_pass}") do
      app_databases.each do |db|
        run "mysql -uroot -p#{root_pass} -e 'CREATE DATABASE #{db}'"
      end
    end
    
  end
  
  "Tries to login as a user if we can't it gives the option to create the user."
  task :try_login do
    config_check
    begin
      run "ls"
      puts "Logged in ok"
    rescue
      print "==== The user does not yet exist. Would you like to create? [Y/N]"
      line = STDIN.gets.upcase.strip
      puts "*** Could not continue as the login does not exist" if line !="Y"
      exit if line != "Y"
      setup_user
    end
  end
  
  desc "Creates or gets an ssh key for the application"
  task :ssh_key do 
    config_check
    begin
      run "cat .ssh/id_rsa.pub"
    rescue
      run "ssh-keygen -t rsa -f .ssh/id_rsa -N ''"
      run "cat .ssh/id_rsa.pub"
    end
  end
  
  desc "Creates an Apache virtual host file"
  task :vhost do
    config_check
    needs_root
    with_user("root", "#{root_pass}") do 
      public_ip = ""
      run "ifconfig eth0 | grep inet | awk '{print $2}' | sed 's/addr://'" do |_, _, public_ip| end
      public_ip = public_ip.strip
      f = File.open('templates/apache_vhost.erb')
      contents = f.read
      f.close
      buffer = ERB.new(contents)
      config = buffer.result(binding())
      put config, "/etc/httpd/conf.d/#{application}-apache-vhost.conf"
    end
    
  end
  
  desc "Runs a backup of an application, copies to another server and then sets up on new server"
  task :copy_site do 
    config_check
    needs_root
    backup
    print "==== Which server would you like to copy #{application} to? ["
    print options["servers"].keys.join(", ")
    print " ] "
    line = STDIN.gets.strip
    begin      
      new_server = options["servers"][line]["domain"] 
    rescue 
      puts "*** Can't find that new server in the config"
      exit
    end
    with_user("root", "#{root_pass}") do
      run "rsync -avzh . -e ssh root@#{new_server}:/backup/#{application}/ --exclude 'tmp/*' --exclude '.git/*'"
    end
    options["apps"]["#{application}"]["server"] = line
    config_write
    try_login
    restore
  end
  
end




def with_user(new_user, new_pass, &block) 
  old_user, old_pass = user, password 
  set :user, new_user 
  set :password, new_pass 
  close_sessions 
  yield 
  set :user, old_user 
  set :password, old_pass 
  close_sessions 
end 
def close_sessions 
  sessions.values.each { |session| session.close } 
  sessions.clear 
end






